// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String  @id @default(cuid())
  bio            String?
  profilePicture String?
  user           User    @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id        String  @unique @map("user_id")
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  name     String?
  profile  Profile?
  Reminder Reminder?
}

model Club {
  id           String    @id @default(cuid())
  name         String
  address      String?
  city         City      @relation(fields: [city_name, postal_code, country_name], references: [city_name, postal_code, country_name])
  city_name    String
  country_name String
  postal_code  String
  telephone    String?
  email        String
  location     Location?
}

model Location {
  id      Int    @id @default(autoincrement())
  lat     String
  lng     String
  club    Club   @relation(fields: [club_id], references: [id])
  club_id String @unique @map("club_id")
}

model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  Reminder    Reminder[]
}

model Reminder {
  id         Int      @id @default(autoincrement())
  event      Event    @relation(fields: [event_id], references: [id])
  event_id   Int
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @unique @map("user_id")
  read       Boolean
  trash      Boolean
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  content    String
}

model City {
  id           Int     @id @default(autoincrement())
  city_name    String
  postal_code  String
  country      Country @relation(fields: [country_name], references: [country_name])
  country_name String  @unique
  Club         Club[]

  @@unique([city_name, postal_code, country_name])
}

model Country {
  id           Int    @id @default(autoincrement())
  country_name String
  City         City?

  @@unique([country_name])
}
